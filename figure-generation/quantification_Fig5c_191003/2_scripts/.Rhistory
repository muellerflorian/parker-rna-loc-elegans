}
# median relative
data_summarylog <- function(data, varname, groupnames){
require(plyr)
summary_func <- function(x, col){
c(median = log(median(x[[col]], na.rm=TRUE),10),
sd = sd(log(x[[col]],10), na.rm=TRUE))
}
data_sum<-ddply(data, groupnames, .fun=summary_func,
varname)
data_sum <- rename(data_sum, c("median" = varname))
data_sum[is.na(data_sum)] <- 0
return(data_sum)
}
# Make a plotting function
# Make a function to plot the data
# plotStats(dataset, varname, titleY)
#    dataset <- this is a dataset in the form produced by 'data_summary'
#    varname <- this corresponds to a colname in 'dataset'
#    titleY  <- this is a title for the Y axis of the plot
plotStats <- function(dataset, varname, titleY){
ggplot(dataset, aes(x=Cell_Stage, y=varname, group=RNAi_Condition, color=RNAi_Condition, shape = RNAi_Condition))+
geom_ribbon(aes(ymin=varname-sd, ymax=varname+sd, fill = RNAi_Condition), alpha=0.1, linetype = 0) +
facet_grid(. ~ Transcript , scales = "free_y") +
labs(y = titleY) +
geom_line() + geom_point() +
theme_linedraw() +
scale_colour_colorblind() +
scale_fill_colorblind() +
scale_shape_manual(values=c(15, 16, 17, 18, 6)) +
theme(strip.text = element_text(face = "italic"),
panel.grid.minor = element_blank(),
panel.grid.major = element_line(colour = "grey"),
axis.text.y = element_text(angle=90),
axis.text.x = element_text(angle=90))
}
#Summarize the data for Number of RNAs
noPiel_summ_total_RNA <- data_summary(noPie, varname="Total_No_RNA",
groupnames=c("Transcript", "RNAi_Condition", "Cell_Stage"))
# plot number of RNA molecules by transcript type
p_rnaTot <- plotStats(noPiel_summ_total_RNA, noPiel_summ_total_RNA$Total_No_RNA, "Total number of mRNA molecules")
p_rnaTot
#Summarize the data for Number of clusters
noPiel_total_clusters <- data_summary(noPie, varname="No_RNA_clusters",
groupnames=c("Transcript", "RNAi_Condition", "Cell_Stage"))
p_clustTot <- plotStats(noPiel_total_clusters, noPiel_total_clusters$No_RNA_clusters, "Number of RNA clusters")
p_clustTot
noPie <- noPie %>%
mutate(fraction2 = No_RNA_in_clusters/Total_No_RNA)
#Summarize the data for Fraction of mRNAs in clusters
noPiel_fraction_inclusters <- data_summary(noPie, varname="fraction2",
groupnames=c("Transcript", "RNAi_Condition", "Cell_Stage"))
# plot number of RNA molecules by transcript type
p_fraction <- plotStats(noPiel_fraction_inclusters, noPiel_fraction_inclusters$fraction2, "fraction mRNAs in clusters")
p_fraction
quantTable <- quantTable %>%
mutate(fraction2 = No_RNA_in_clusters/Total_No_RNA)
#Summarize the data for Average mRNA molecules per cluster
noPie_Average_mR_per_C <- data_summary(noPie, varname="Average_No_RNA_per_Cluster",
groupnames=c("Transcript", "RNAi_Condition", "Cell_Stage"))
p_Average <- plotStats(noPie_Average_mR_per_C, noPie_Average_mR_per_C$Average_No_RNA_per_Cluster, "Average number of mRNAs per cluster")
p_Average
#Set date
date <- format(Sys.time(), "%y%m%d")
#set filename
filename <- paste("../3_output/", date, "_output_plots_Fig6.pdf", sep = "")
#export pdf
pdf(file = filename, width = 8, height = 6)
grid.arrange(p_rnaTot, p_Average, ncol = 1)
dev.off()
dev.off()
#Report
print("The following output plot was saved: ", quote = FALSE)
print(filename, quote = FALSE)
t.testdiffs_molecules <- function(data, transcript, RBP){
# select transcript & RBP
transcript_quantTable <- data%>%
filter(Transcript == transcript) %>%
filter(RNAi_Condition == "L4440" | RNAi_Condition == RBP)
#Adjust factor levels
transcript_quantTable$RNAi_Condition <- factor(transcript_quantTable$RNAi_Condition, levels = c("L4440", RBP))
# summarize transcript-specific data
transcript_SummaryTable <- transcript_quantTable%>%
dplyr::group_by(Cell_Stage, RNAi_Condition) %>%
dplyr::summarize(value = list(Total_No_RNA)) %>%
spread(RNAi_Condition, value)
# Perform t-tests
transcript_pvalues <- data.frame()
for (i in 1:5){
transcript_pvalues[i,1] <- t.test(transcript_SummaryTable[[i,2]], transcript_SummaryTable[[i,3]])$p.value
rownames(transcript_pvalues)[i] <- as.character(transcript_SummaryTable$Cell_Stage[i])
}
colnames(transcript_pvalues) <- c("p.value")
# Perform multiple test corrections using the Benjamini Hochberg method
transcript_pvalues <- cbind(transcript_pvalues, BH_padjust = p.adjust(transcript_pvalues$p.value, method = "BH"))
# Report p values
return(transcript_pvalues)
}
t.testdiffs_clusters <- function(data, transcript, RBP){
# select transcript & RBP
transcript_quantTable <- data%>%
filter(Transcript == transcript) %>%
filter(RNAi_Condition == "L4440" | RNAi_Condition == RBP)
#Adjust factor levels
transcript_quantTable$RNAi_Condition <- factor(transcript_quantTable$RNAi_Condition, levels = c("L4440", RBP))
# summarize transcript-specific data
transcript_SummaryTable <- transcript_quantTable%>%
dplyr::group_by(Cell_Stage, RNAi_Condition) %>%
dplyr::summarize(value = list(No_RNA_clusters)) %>%
spread(RNAi_Condition, value)
# Perform t-tests
transcript_pvalues <- data.frame()
for (i in 1:5){
transcript_pvalues[i,1] <- t.test(transcript_SummaryTable[[i,2]], transcript_SummaryTable[[i,3]])$p.value
rownames(transcript_pvalues)[i] <- as.character(transcript_SummaryTable$Cell_Stage[i])
}
colnames(transcript_pvalues) <- c("p.value")
# Perform multiple test corrections using the Benjamini Hochberg method
transcript_pvalues <- cbind(transcript_pvalues, BH_padjust = p.adjust(transcript_pvalues$p.value, method = "BH"))
# Report p values
return(transcript_pvalues)
}
t.testdiffs_fraction <- function(data, transcript, RBP){
# select transcript & RBP
transcript_quantTable <- data%>%
filter(Transcript == transcript) %>%
filter(RNAi_Condition == "L4440" | RNAi_Condition == RBP)
#Adjust factor levels
transcript_quantTable$RNAi_Condition <- factor(transcript_quantTable$RNAi_Condition, levels = c("L4440", RBP))
# summarize transcript-specific data
transcript_SummaryTable <- transcript_quantTable%>%
dplyr::group_by(Cell_Stage, RNAi_Condition) %>%
dplyr::summarize(value = list(fraction_RNA_in_clusters)) %>%
spread(RNAi_Condition, value)
# Perform t-tests
transcript_pvalues <- data.frame()
for (i in 1:5){
transcript_pvalues[i,1] <- t.test(transcript_SummaryTable[[i,2]], transcript_SummaryTable[[i,3]])$p.value
rownames(transcript_pvalues)[i] <- as.character(transcript_SummaryTable$Cell_Stage[i])
}
colnames(transcript_pvalues) <- c("p.value")
# Perform multiple test corrections using the Benjamini Hochberg method
transcript_pvalues <- cbind(transcript_pvalues, BH_padjust = p.adjust(transcript_pvalues$p.value, method = "BH"))
# Report p values
return(transcript_pvalues)
}
t.testdiffs_avg <- function(data, transcript, RBP){
# select transcript & RBP
transcript_quantTable <- data%>%
filter(Transcript == transcript) %>%
filter(RNAi_Condition == "L4440" | RNAi_Condition == RBP)
#Adjust factor levels
transcript_quantTable$RNAi_Condition <- factor(transcript_quantTable$RNAi_Condition, levels = c("L4440", RBP))
# summarize transcript-specific data
transcript_SummaryTable <- transcript_quantTable%>%
dplyr::group_by(Cell_Stage, RNAi_Condition) %>%
dplyr::summarize(value = list(Average_No_RNA_per_Cluster)) %>%
spread(RNAi_Condition, value)
# Perform t-tests
transcript_pvalues <- data.frame()
for (i in 1:5){
transcript_pvalues[i,1] <- t.test(transcript_SummaryTable[[i,2]], transcript_SummaryTable[[i,3]])$p.value
rownames(transcript_pvalues)[i] <- as.character(transcript_SummaryTable$Cell_Stage[i])
}
colnames(transcript_pvalues) <- c("p.value")
# Perform multiple test corrections using the Benjamini Hochberg method
transcript_pvalues <- cbind(transcript_pvalues, BH_padjust = p.adjust(transcript_pvalues$p.value, method = "BH"))
# Report p values
return(transcript_pvalues)
}
## Test molecules p-values for chs-1
chs1_molecules_pvals <- lapply(c("oma-1", "mex-3", "spn-4", "spn-4_mex-3"),
function(x) {t.testdiffs_molecules(quantTable, "chs-1", x)})
names(chs1_molecules_pvals) <- c("oma-1", "mex-3", "spn-4", "spn-4_mex-3")
print("number of molecules = chs-1")
print(chs1_molecules_pvals)
## Test molecules p-values for clu-1
clu_molecules_pvals <- lapply(c("oma-1", "mex-3", "spn-4", "spn-4_mex-3"),
function(x) {t.testdiffs_molecules(quantTable, "clu-1", x)})
names(clu_molecules_pvals) <- c("oma-1", "mex-3", "spn-4", "spn-4_mex-3")
print("number of molecules = clu-1")
print(clu_molecules_pvals)
## Test molecules p-values for cpg-2
cpg_molecules_pvals <- lapply(c("oma-1", "mex-3", "spn-4", "spn-4_mex-3"),
function(x) {t.testdiffs_molecules(quantTable, "cpg-2", x)})
names(cpg_molecules_pvals) <- c("oma-1", "mex-3", "spn-4", "spn-4_mex-3")
print("number of molecules = cpg-2")
print(cpg_molecules_pvals)
## Test molecules & nos-2 p-values
nos2_molecules_pvals <- lapply(c("oma-1", "mex-3", "spn-4", "spn-4_mex-3"),
function(x) {t.testdiffs_molecules(quantTable, "nos-2", x)})
names(nos2_molecules_pvals) <- c("oma-1", "mex-3", "spn-4", "spn-4_mex-3")
print("number of molecules = nos-2")
print(nos2_molecules_pvals)
## Test pvalues on averages & chs-1 p-values
chs_averages_pvals <- lapply(c("oma-1", "mex-3", "spn-4", "spn-4_mex-3"),
function(x) {t.testdiffs_avg(quantTable, "chs-1", x)})
names(chs_averages_pvals) <- c("oma-1", "mex-3", "spn-4", "spn-4_mex-3")
print("average molecules per cluster = chs-1")
print(chs_averages_pvals)
chs_averages_pvals
chs_averages_pvals[[1]][[2]]
(0.05 < chs_averages_pvals[[1]][[2]] )
(0.05 > chs_averages_pvals[[1]][[2]] )
(0.05 > chs_averages_pvals[[1]][[2]] )
(0.005 > chs_averages_pvals[[1]][[2]] )
(0.0005 > chs_averages_pvals[[1]][[2]] )
(0.00005 > chs_averages_pvals[[1]][[2]] )
(0.000005 > chs_averages_pvals[[1]][[2]] )
(0.05 > chs_averages_pvals[[2]][[2]] )
(0.005 > chs_averages_pvals[[2]][[2]] )
(0.0005 > chs_averages_pvals[[2]][[2]] )
(0.00005 > chs_averages_pvals[[2]][[2]] )
(0.000005 > chs_averages_pvals[[2]][[2]] )
chs_averages_pvals[[2]][[2]]
chs_averages_pvals[[1]][[1]]
chs_averages_pvals[[2]][[2]]
chs_averages_pvals[[3]][[2]]
chs_averages_pvals[[3]][[2]]
chs_averages_pvals[[3]][[2]]
(0.05 > chs_averages_pvals[[3]][[2]] )
(0.005 > chs_averages_pvals[[3]][[2]] )
(0.0005 > chs_averages_pvals[[3]][[2]] )
(0.00005 > chs_averages_pvals[[3]][[2]] )
(0.000005 > chs_averages_pvals[[3]][[2]] )
chs_averages_pvals[[4]][[2]]
(0.05 > chs_averages_pvals[[4]][[2]] )
(0.005 > chs_averages_pvals[[4]][[2]] )
(0.0005 > chs_averages_pvals[[4]][[2]] )
(0.00005 > chs_averages_pvals[[4]][[2]] )
(0.000005 > chs_averages_pvals[[4]][[2]] )
(0.05 < chs_averages_pvals[[4]][[2]] )
(0.005 < chs_averages_pvals[[4]][[2]] )
chs_averages_pvals[[4]][[2]]
print(chs_averages_pvals)
p <- chs_averages_pvals[[1]][[2]]
(0.05 > p )
(0.005 > p )
(0.0005 > p )
(0.00005 > p )
(0.000005 > p )
p <- chs_averages_pvals[[2]][[2]]
(0.05 > p )
(0.005 > p )
(0.0005 > p )
(0.00005 > p )
(0.000005 > p )
p <- chs_averages_pvals[[3]][[2]]
(0.05 > p )
(0.005 > p )
(0.0005 > p )
(0.00005 > p )
(0.000005 > p )
p <- chs_averages_pvals[[4]][[2]]
(0.05 > p )
(0.005 > p )
(0.0005 > p )
(0.00005 > p )
(0.000005 > p )
p <- chs_averages_pvals[[5]][[2]]
## Test averages & clu-1 p-values
clu_averages_pvals <- lapply(c("oma-1", "mex-3", "spn-4", "spn-4_mex-3"),
function(x) {t.testdiffs_avg(quantTable, "clu-1", x)})
names(clu_averages_pvals) <- c("oma-1", "mex-3", "spn-4", "spn-4_mex-3")
print("average molecules per cluster = clu-1")
print(clu_averages_pvals)
p <- clu_averages_pvals[[1]][[2]]
(0.05 > p )
(0.005 > p )
(0.0005 > p )
(0.00005 > p )
(0.000005 > p )
p <- clu_averages_pvals[[2]][[2]]
(0.05 > p )
(0.005 > p )
(0.0005 > p )
(0.00005 > p )
(0.000005 > p )
p <- clu_averages_pvals[[3]][[2]]
(0.05 > p )
(0.005 > p )
(0.0005 > p )
(0.00005 > p )
(0.000005 > p )
print(clu_averages_pvals)
## Test averages & clu-1 p-values
cpg_averages_pvals <- lapply(c("oma-1", "mex-3", "spn-4", "spn-4_mex-3"),
function(x) {t.testdiffs_avg(quantTable, "cpg-2", x)})
names(cpg_averages_pvals) <- c("oma-1", "mex-3", "spn-4", "spn-4_mex-3")
print("average molecules per cluster = cpg-2")
print(cpg_averages_pvals)
p <- cpg_averages_pvals[[1]][[2]]
(0.05 > p )
(0.005 > p )
(0.0005 > p )
(0.00005 > p )
(0.000005 > p )
p <- cpg_averages_pvals[[2]][[2]]
(0.05 > p )
(0.005 > p )
(0.0005 > p )
(0.00005 > p )
(0.000005 > p )
p <- cpg_averages_pvals[[3]][[2]]
(0.05 > p )
(0.005 > p )
(0.0005 > p )
(0.00005 > p )
(0.000005 > p )
p <- cpg_averages_pvals[[4]][[2]]
(0.05 > p )
(0.005 > p )
(0.0005 > p )
(0.00005 > p )
(0.000005 > p )
p <- nos2_averages_pvals[[1]][[2]]
(0.05 > p )
(0.005 > p )
(0.0005 > p )
(0.00005 > p )
(0.000005 > p )
nos2_averages_pvals
## Test averages & nos-2 p-values
nos2_averages_pvals <- lapply(c("oma-1", "mex-3", "spn-4", "spn-4_mex-3"),
function(x) {t.testdiffs_avg(quantTable, "nos-2", x)})
names(nos2_averages_pvals) <- c("oma-1", "mex-3", "spn-4", "spn-4_mex-3")
print("average molecules per cluster = nos-2")
print(nos2_averages_pvals)
p <- nos2_averages_pvals[[1]][[2]]
nos2_averages_pvals
p <- nos2_averages_pvals[[1]][[2]]
(0.05 > p )
(0.005 > p )
(0.0005 > p )
(0.00005 > p )
(0.000005 > p )
nos2_averages_pvals
(0.05 > p )
(0.005 > p )
(0.05 < p )
(0.005 < p )
(0.0005 < p )
(0.00005 < p )
(0.000005 < p )
p <- nos2_averages_pvals[[1]][[2]]
(0.05 < p )
(0.005 < p )
(0.0005 < p )
(0.00005 < p )
(0.000005 < p )
nos2_averages_pvals
p <- nos2_averages_pvals[[2]][[2]]
(0.05 < p )
(0.005 < p )
(0.0005 < p )
(0.00005 < p )
(0.000005 < p )
p <- cpg_averages_pvals[[1]][[2]]
(0.05 > p )
(0.005 > p )
(0.0005 > p )
(0.00005 > p )
p <- cpg_averages_pvals[[1]][[2]]
(0.05 < p )
(0.005 < p )
(0.0005 < p )
(0.00005 < p )
(0.000005 < p )
p <- cpg_averages_pvals[[2]][[2]]
(0.05 < p )
(0.005 < p )
(0.0005 < p )
(0.00005 < p )
(0.000005 < p )
p <- cpg_averages_pvals[[3]][[2]]
(0.05 < p )
(0.005 < p )
(0.0005 < p )
(0.00005 < p )
(0.000005 < p )
p <- cpg_averages_pvals[[4]][[2]]
(0.05 < p )
(0.005 < p )
print(cpg_averages_pvals)
p <- clu_averages_pvals[[1]][[2]]
(0.05 < p )
(0.005 < p )
(0.0005 < p )
(0.00005 < p )
(0.000005 < p )
print(clu_averages_pvals)
print(nos2_averages_pvals)
p <- nos2_averages_pvals[[1]][[2]]
(0.05 < p )
(0.005 < p )
(0.0005 < p )
(0.00005 < p )
(0.000005 < p )
p <- nos2_averages_pvals[[2]][[2]]
(0.05 < p )
(0.005 < p )
print(nos2_averages_pvals)
p <- nos2_averages_pvals[[3]][[2]]
(0.05 < p )
(0.005 < p )
(0.0005 < p )
(0.00005 < p )
(0.000005 < p )
p <- nos2_averages_pvals[[4]][[2]]
(0.05 < p )
(0.005 < p )
(0.0005 < p )
(0.00005 < p )
(0.000005 < p )
## Test molecules p-values for chs-1
chs1_molecules_pvals <- lapply(c("oma-1", "mex-3", "spn-4", "spn-4_mex-3"),
function(x) {t.testdiffs_molecules(quantTable, "chs-1", x)})
names(chs1_molecules_pvals) <- c("oma-1", "mex-3", "spn-4", "spn-4_mex-3")
print("number of molecules = chs-1")
print(chs1_molecules_pvals)
p <- chs1_molecules_pvals[[1]][[2]]
(0.05 < p )
(0.005 < p )
(0.0005 < p )
(0.00005 < p )
(0.000005 < p )
p <- chs1_molecules_pvals[[2]][[2]]
(0.05 < p )
(0.005 < p )
(0.0005 < p )
(0.00005 < p )
(0.000005 < p )
p <- chs1_molecules_pvals[[3]][[2]]
(0.05 < p )
(0.005 < p )
(0.0005 < p )
(0.00005 < p )
p <- chs1_molecules_pvals[[4]][[2]]
(0.05 < p )
(0.005 < p )
(0.0005 < p )
(0.00005 < p )
(0.000005 < p )
## Test molecules p-values for clu-1
clu_molecules_pvals <- lapply(c("oma-1", "mex-3", "spn-4", "spn-4_mex-3"),
function(x) {t.testdiffs_molecules(quantTable, "clu-1", x)})
names(clu_molecules_pvals) <- c("oma-1", "mex-3", "spn-4", "spn-4_mex-3")
print("number of molecules = clu-1")
print(clu_molecules_pvals)
p <- clu_molecules_pvals[[4]][[2]]
(0.05 < p )
(0.005 < p )
(0.0005 < p )
(0.00005 < p )
(0.000005 < p )
## Test molecules p-values for cpg-2
cpg_molecules_pvals <- lapply(c("oma-1", "mex-3", "spn-4", "spn-4_mex-3"),
function(x) {t.testdiffs_molecules(quantTable, "cpg-2", x)})
names(cpg_molecules_pvals) <- c("oma-1", "mex-3", "spn-4", "spn-4_mex-3")
print("number of molecules = cpg-2")
print(cpg_molecules_pvals)
p <- cpg_molecules_pvals[[1]][[2]]
(0.05 < p )
(0.005 < p )
(0.0005 < p )
(0.00005 < p )
(0.000005 < p )
p <- cpg_molecules_pvals[[2]][[2]]
(0.05 < p )
(0.005 < p )
(0.0005 < p )
(0.00005 < p )
p <- cpg_molecules_pvals[[3]][[2]]
(0.05 < p )
(0.005 < p )
(0.0005 < p )
(0.00005 < p )
(0.000005 < p )
p <- cpg_molecules_pvals[[4]][[2]]
(0.05 < p )
(0.005 < p )
(0.0005 < p )
(0.00005 < p )
(0.000005 < p )
## Test molecules & nos-2 p-values
nos2_molecules_pvals <- lapply(c("oma-1", "mex-3", "spn-4", "spn-4_mex-3"),
function(x) {t.testdiffs_molecules(quantTable, "nos-2", x)})
names(nos2_molecules_pvals) <- c("oma-1", "mex-3", "spn-4", "spn-4_mex-3")
print("number of molecules = nos-2")
print(nos2_molecules_pvals)
p <- nos2_molecules_pvals[[1]][[2]]
(0.05 < p )
(0.005 < p )
(0.0005 < p )
(0.00005 < p )
p <- nos2_molecules_pvals[[2]][[2]]
(0.05 < p )
(0.005 < p )
(0.0005 < p )
(0.00005 < p )
(0.000005 < p )
p <- nos2_molecules_pvals[[3]][[2]]
(0.05 < p )
(0.005 < p )
(0.0005 < p )
(0.00005 < p )
(0.000005 < p )
p <- nos2_molecules_pvals[[4]][[2]]
(0.05 < p )
(0.005 < p )
(0.0005 < p )
(0.00005 < p )
