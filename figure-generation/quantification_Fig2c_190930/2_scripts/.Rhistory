(0.005 < p )
(0.0005 < p )
p <- 0.0002099946
(0.05 < p )
(0.005 < p )
(0.0005 < p )
(0.00005 < p )
p <- 0.0066173217
(0.05 < p )
(0.005 < p )
(0.0005 < p )
str(quantTable)
## Test fraction of mRNAs in clusters  p-values
fraction_pvals <- lapply(c("chs-1", "clu-1", "cpg-2", "nos-2"),
function(x) {t.testdiffs_fraction(quantTable, x)})
names(fraction_pvals) <- c("chs-1", "clu-1", "cpg-2", "nos-2")
print("fraction of mRNAs in clusters" )
t.testdiffs_fraction <- function(data, transcpt){
# filter for transcripts
transcript_quantTable <- quantTable%>%
filter(Transcript == transcpt | Transcript == "set-3")
# re-do factoring
transcript_quantTable$Transcript <- factor(transcript_quantTable$Transcript, levels = c(transcpt, "set-3"))
# summarize transcript-specific data
transcript_SummaryTable <- transcript_quantTable%>%
dplyr::group_by(Cell_Stage, Transcript) %>%
dplyr::summarize(value = list(fraction_RNA_in_clusters)) %>%
spread(Transcript, value)
# Perform t-tests
transcript_pvalues <- data.frame()
for (i in 1:6){
transcript_pvalues[i,1] <- t.test(transcript_SummaryTable[[i,2]],
transcript_SummaryTable[[i,3]])$p.value
rownames(transcript_pvalues)[i] <- as.character(transcript_SummaryTable$Cell_Stage[i])
}
colnames(transcript_pvalues) <- c("p.value")
# Perform multiple test corrections using the Benjamini Hochberg method
transcript_pvalues <- cbind(transcript_pvalues, BH_padjust = p.adjust(transcript_pvalues$p.value, method = "BH"))
# Report p values
return(transcript_pvalues)
}
## Test fraction of mRNAs in clusters  p-values
fraction_pvals <- lapply(c("chs-1", "clu-1", "cpg-2", "nos-2"),
function(x) {t.testdiffs_fraction(quantTable, x)})
names(fraction_pvals) <- c("chs-1", "clu-1", "cpg-2", "nos-2")
print("fraction of mRNAs in clusters" )
print(fraction_pvals)
fraction_pvals[[1]]
p <- 6.947927e-04
(0.05 < p )
(0.005 < p )
(0.0005 < p )
p <- 3.048804e-16
(0.05 < p )
(0.005 < p )
(0.0005 < p )
(0.00005 < p )
(0.000005 < p )
p <- 4.851245e-05
(0.05 < p )
(0.005 < p )
(0.0005 < p )
(0.00005 < p )
(0.000005 < p )
p <- 4.424126e-05
(0.05 < p )
(0.005 < p )
(0.0005 < p )
(0.00005 < p )
(0.000005 < p )
p <- 7.462713e-03
(0.05 < p )
(0.005 < p )
(0.0005 < p )
p <- 1.964285e-02
(0.05 < p )
(0.005 < p )
(0.0005 < p )
fraction_pvals[[2]]
p <- 6.969811e-05
(0.05 < p )
(0.005 < p )
(0.0005 < p )
(0.00005 < p )
p <- 7.102552e-04
(0.05 < p )
(0.005 < p )
(0.0005 < p )
p <- 1.133300e-05
(0.05 < p )
(0.005 < p )
(0.0005 < p )
(0.00005 < p )
p <- 7.102552e-04
(0.05 < p )
(0.005 < p )
(0.0005 < p )
p <- 2.626388e-02
(0.05 < p )
(0.005 < p )
(0.0005 < p )
p <- 5.309139e-02
(0.05 < p )
(0.005 < p )
(0.0005 < p )
fraction_pvals[[3]]
p <- 1.724408e-02
(0.05 < p )
(0.005 < p )
(0.0005 < p )
p <- 5.594138e-09
(0.05 < p )
(0.005 < p )
(0.0005 < p )
(0.00005 < p )
(0.000005 < p )
p <- 3.628343e-04
(0.05 < p )
(0.005 < p )
(0.0005 < p )
(0.00005 < p )
p <- 4.851343e-02
(0.05 < p )
(0.005 < p )
(0.0005 < p )
p <- 6.769282e-03
(0.05 < p )
(0.005 < p )
p <- 1.122588e-01
(0.05 < p )
(0.005 < p )
fraction_pvals[[4]]
p <- 5.107714e-03
(0.05 < p )
(0.005 < p )
(0.0005 < p )
p <- 5.716380e-06
(0.05 < p )
(0.005 < p )
(0.0005 < p )
(0.00005 < p )
(0.000005 < p )
p <- 5.157098e-04
(0.05 < p )
(0.005 < p )
(0.0005 < p )
p <- 7.006615e-03
(0.05 < p )
(0.005 < p )
p <- 1.878732e-05
(0.05 < p )
(0.005 < p )
(0.0005 < p )
(0.00005 < p )
(0.000005 < p )
p <- 2.760786e-03
(0.05 < p )
(0.005 < p )
(0.0005 < p )
str(quantTable)
t.testdiffs_avg <- <- function(data, transcpt){
# filter for transcripts
transcript_quantTable <- quantTable%>%
filter(Transcript == transcpt | Transcript == "set-3")
# re-do factoring
transcript_quantTable$Transcript <- factor(transcript_quantTable$Transcript, levels = c(transcpt, "set-3"))
# summarize transcript-specific data
transcript_SummaryTable <- transcript_quantTable%>%
dplyr::group_by(Cell_Stage, Transcript) %>%
dplyr::summarize(value = list(Average_No_RNA_per_Cluster)) %>%
spread(Transcript, value)
# Perform t-tests
transcript_pvalues <- data.frame()
for (i in 1:6){
transcript_pvalues[i,1] <- t.test(transcript_SummaryTable[[i,2]],
transcript_SummaryTable[[i,3]])$p.value
rownames(transcript_pvalues)[i] <- as.character(transcript_SummaryTable$Cell_Stage[i])
}
colnames(transcript_pvalues) <- c("p.value")
# Perform multiple test corrections using the Benjamini Hochberg method
transcript_pvalues <- cbind(transcript_pvalues, BH_padjust = p.adjust(transcript_pvalues$p.value, method = "BH"))
# Report p values
return(transcript_pvalues)
}
## Test average number of mRNAs in clusters - p-values
avgClustSize_pvals <- lapply(c("chs-1", "clu-1", "cpg-2", "nos-2"),
function(x) {t.testdiffs_avg(quantTable, x)})
t.testdiffs_avg <- function(data, transcpt){
# filter for transcripts
transcript_quantTable <- quantTable%>%
filter(Transcript == transcpt | Transcript == "set-3")
# re-do factoring
transcript_quantTable$Transcript <- factor(transcript_quantTable$Transcript, levels = c(transcpt, "set-3"))
# summarize transcript-specific data
transcript_SummaryTable <- transcript_quantTable%>%
dplyr::group_by(Cell_Stage, Transcript) %>%
dplyr::summarize(value = list(Average_No_RNA_per_Cluster)) %>%
spread(Transcript, value)
# Perform t-tests
transcript_pvalues <- data.frame()
for (i in 1:6){
transcript_pvalues[i,1] <- t.test(transcript_SummaryTable[[i,2]],
transcript_SummaryTable[[i,3]])$p.value
rownames(transcript_pvalues)[i] <- as.character(transcript_SummaryTable$Cell_Stage[i])
}
colnames(transcript_pvalues) <- c("p.value")
# Perform multiple test corrections using the Benjamini Hochberg method
transcript_pvalues <- cbind(transcript_pvalues, BH_padjust = p.adjust(transcript_pvalues$p.value, method = "BH"))
# Report p values
return(transcript_pvalues)
}
## Test average number of mRNAs in clusters - p-values
avgClustSize_pvals <- lapply(c("chs-1", "clu-1", "cpg-2", "nos-2"),
function(x) {t.testdiffs_avg(quantTable, x)})
t.testdiffs_avg <- function(data, transcpt){
# filter for transcripts
transcript_quantTable <- quantTable%>%
filter(Transcript == transcpt | Transcript == "set-3")
# re-do factoring
transcript_quantTable$Transcript <- factor(transcript_quantTable$Transcript, levels = c(transcpt, "set-3"))
# summarize transcript-specific data
transcript_SummaryTable <- transcript_quantTable%>%
dplyr::group_by(Cell_Stage, Transcript) %>%
dplyr::summarize(value = list(Average_No_RNA_per_Cluster)) %>%
spread(Transcript, value)
# Perform t-tests
transcript_pvalues <- data.frame()
for (i in 1:6){
transcript_pvalues[i,1] <- t.test(transcript_SummaryTable[[i,2]],
transcript_SummaryTable[[i,3]])$p.value
rownames(transcript_pvalues)[i] <- as.character(transcript_SummaryTable$Cell_Stage[i])
}
colnames(transcript_pvalues) <- c("p.value")
# Perform multiple test corrections using the Benjamini Hochberg method
transcript_pvalues <- cbind(transcript_pvalues, BH_padjust = p.adjust(transcript_pvalues$p.value, method = "BH"))
# Report p values
return(transcript_SummaryTable)
}
## Test average number of mRNAs in clusters - p-values
avgClustSize_pvals <- lapply(c("chs-1", "clu-1", "cpg-2", "nos-2"),
function(x) {t.testdiffs_avg(quantTable, x)})
# summarize transcript-specific data
transcript_SummaryTable <- transcript_quantTable%>%
dplyr::group_by(Cell_Stage, Transcript) %>%
dplyr::summarize(value = list(Average_No_RNA_per_Cluster)) %>%
spread(Transcript, value)
t.testdiffs_avg <- function(data, transcpt){
# filter for transcripts
transcript_quantTable <- quantTable%>%
filter(Transcript == transcpt | Transcript == "set-3")
# re-do factoring
transcript_quantTable$Transcript <- factor(transcript_quantTable$Transcript, levels = c(transcpt, "set-3"))
# summarize transcript-specific data
transcript_SummaryTable <- transcript_quantTable%>%
dplyr::group_by(Cell_Stage, Transcript) %>%
dplyr::summarize(value = list(Average_No_RNA_per_Cluster)) %>%
spread(Transcript, value)
# # Perform t-tests
# transcript_pvalues <- data.frame()
#
# for (i in 1:6){
# transcript_pvalues[i,1] <- t.test(transcript_SummaryTable[[i,2]],
#                                   transcript_SummaryTable[[i,3]])$p.value
#   rownames(transcript_pvalues)[i] <- as.character(transcript_SummaryTable$Cell_Stage[i])
# }
#
# colnames(transcript_pvalues) <- c("p.value")
#
# # Perform multiple test corrections using the Benjamini Hochberg method
# transcript_pvalues <- cbind(transcript_pvalues, BH_padjust = p.adjust(transcript_pvalues$p.value, method = "BH"))
# Report p values
return(transcript_SummaryTable)
}
## Test average number of mRNAs in clusters - p-values
avgClustSize_pvals <- lapply(c("chs-1", "clu-1", "cpg-2", "nos-2"),
function(x) {t.testdiffs_avg(quantTable, x)})
avgClustSize_pvals
avgClustSize_pvals[[1]]
unlist(avgClustSize_pvals[[1]])
avgClustSize_pvals[[1]][[2]]
avgClustSize_pvals[[1]]
avgClustSize_pvals[[1]][[2]]
avgClustSize_pvals[[1]][[1]]
## Test average number of mRNAs in clusters - p-values
avgClustSize_pvals <- lapply(c("chs-1", "clu-1"),
function(x) {t.testdiffs_avg(quantTable, x)})
t.testdiffs_avg <- function(data, transcpt){
# filter for transcripts
transcript_quantTable <- quantTable%>%
filter(Transcript == transcpt | Transcript == "set-3")
# re-do factoring
transcript_quantTable$Transcript <- factor(transcript_quantTable$Transcript, levels = c(transcpt, "set-3"))
# summarize transcript-specific data
transcript_SummaryTable <- transcript_quantTable%>%
dplyr::group_by(Cell_Stage, Transcript) %>%
dplyr::summarize(value = list(Average_No_RNA_per_Cluster)) %>%
spread(Transcript, value)
# Perform t-tests
transcript_pvalues <- data.frame()
for (i in 1:6){
transcript_pvalues[i,1] <- t.test(transcript_SummaryTable[[i,2]],
transcript_SummaryTable[[i,3]])$p.value
rownames(transcript_pvalues)[i] <- as.character(transcript_SummaryTable$Cell_Stage[i])
}
colnames(transcript_pvalues) <- c("p.value")
# Perform multiple test corrections using the Benjamini Hochberg method
transcript_pvalues <- cbind(transcript_pvalues, BH_padjust = p.adjust(transcript_pvalues$p.value, method = "BH"))
# Report p values
return(transcript_SummaryTable)
}
## Test average number of mRNAs in clusters - p-values
avgClustSize_pvals <- lapply(c("chs-1", "clu-1"),
function(x) {t.testdiffs_avg(quantTable, x)})
## Test average number of mRNAs in clusters - p-values
avgClustSize_pvals <- lapply(c("chs-1"),
function(x) {t.testdiffs_avg(quantTable, x)})
transcript_pvalues[i,1] <- t.test(transcript_SummaryTable[[i,2]],
transcript_SummaryTable[[i,3]])$p.value
t.testdiffs_avg <- function(data, transcpt){
# filter for transcripts
transcript_quantTable <- quantTable%>%
filter(Transcript == transcpt | Transcript == "set-3")
# re-do factoring
transcript_quantTable$Transcript <- factor(transcript_quantTable$Transcript, levels = c(transcpt, "set-3"))
# summarize transcript-specific data
transcript_SummaryTable <- transcript_quantTable%>%
dplyr::group_by(Cell_Stage, Transcript) %>%
dplyr::summarize(value = list(Average_No_RNA_per_Cluster)) %>%
spread(Transcript, value)
# Perform t-tests
transcript_pvalues <- data.frame()
for (i in 1:6){
transcript_pvalues[i,1] <- t.test(transcript_SummaryTable[[i,2]],
transcript_SummaryTable[[i,3]])$p.value
rownames(transcript_pvalues)[i] <- as.character(transcript_SummaryTable$Cell_Stage[i])
}
colnames(transcript_pvalues) <- c("p.value")
# Perform multiple test corrections using the Benjamini Hochberg method
transcript_pvalues <- cbind(transcript_pvalues, BH_padjust = p.adjust(transcript_pvalues$p.value, method = "BH"))
# Report p values
return(transcript_pvalues)
}
t.testdiffs_avg(quantTable, "chs-1")
t.testdiffs_avg(quantTable, "clu-1")
t.testdiffs_avg <- function(data, transcpt){
# filter for transcripts
transcript_quantTable <- quantTable%>%
filter(Transcript == transcpt | Transcript == "set-3")
# re-do factoring
transcript_quantTable$Transcript <- factor(transcript_quantTable$Transcript, levels = c(transcpt, "set-3"))
# summarize transcript-specific data
transcript_SummaryTable <- transcript_quantTable%>%
dplyr::group_by(Cell_Stage, Transcript) %>%
dplyr::summarize(value = list(Average_No_RNA_per_Cluster)) %>%
spread(Transcript, value)
# # Perform t-tests
# transcript_pvalues <- data.frame()
#
# for (i in 1:6){
# transcript_pvalues[i,1] <- t.test(transcript_SummaryTable[[i,2]],
#                                   transcript_SummaryTable[[i,3]])$p.value
#   rownames(transcript_pvalues)[i] <- as.character(transcript_SummaryTable$Cell_Stage[i])
# }
#
# colnames(transcript_pvalues) <- c("p.value")
#
# # Perform multiple test corrections using the Benjamini Hochberg method
# transcript_pvalues <- cbind(transcript_pvalues, BH_padjust = p.adjust(transcript_pvalues$p.value, method = "BH"))
# Report p values
return(transcript_SummaryTable)
}
t.testdiffs_avg(quantTable, "clu-1")
p.test <- t.testdiffs_avg(quantTable, "clu-1")
p.test[[1]]
p.test
p.test[[3]]
t.testdiffs_avg <- function(data, transcpt){
# filter for transcripts
transcript_quantTable <- quantTable%>%
filter(Transcript == transcpt | Transcript == "set-3")
# re-do factoring
transcript_quantTable$Transcript <- factor(transcript_quantTable$Transcript, levels = c(transcpt, "set-3"))
# summarize transcript-specific data
transcript_SummaryTable <- transcript_quantTable%>%
dplyr::group_by(Cell_Stage, Transcript) %>%
dplyr::summarize(value = list(Average_No_RNA_per_Cluster)) %>%
spread(Transcript, value)
# Perform t-tests
transcript_pvalues <- data.frame()
for (i in 1:5){
transcript_pvalues[i,1] <- t.test(transcript_SummaryTable[[i,2]],
transcript_SummaryTable[[i,3]])$p.value
rownames(transcript_pvalues)[i] <- as.character(transcript_SummaryTable$Cell_Stage[i])
}
colnames(transcript_pvalues) <- c("p.value")
# Perform multiple test corrections using the Benjamini Hochberg method
transcript_pvalues <- cbind(transcript_pvalues, BH_padjust = p.adjust(transcript_pvalues$p.value, method = "BH"))
# Report p values
return(transcript_SummaryTable)
}
p.test <- t.testdiffs_avg(quantTable, "clu-1")
t.testdiffs_avg <- function(data, transcpt){
# filter for transcripts
transcript_quantTable <- quantTable%>%
filter(Transcript == transcpt | Transcript == "set-3")
# re-do factoring
transcript_quantTable$Transcript <- factor(transcript_quantTable$Transcript, levels = c(transcpt, "set-3"))
# summarize transcript-specific data
transcript_SummaryTable <- transcript_quantTable%>%
dplyr::group_by(Cell_Stage, Transcript) %>%
dplyr::summarize(value = list(Average_No_RNA_per_Cluster)) %>%
spread(Transcript, value)
# Perform t-tests
transcript_pvalues <- data.frame()
for (i in 1:5){
transcript_pvalues[i,1] <- t.test(transcript_SummaryTable[[i,2]],
transcript_SummaryTable[[i,3]])$p.value
rownames(transcript_pvalues)[i] <- as.character(transcript_SummaryTable$Cell_Stage[i])
}
colnames(transcript_pvalues) <- c("p.value")
# Perform multiple test corrections using the Benjamini Hochberg method
transcript_pvalues <- cbind(transcript_pvalues, BH_padjust = p.adjust(transcript_pvalues$p.value, method = "BH"))
# Report p values
return(transcript_pvalues)
}
p.test <- t.testdiffs_avg(quantTable, "clu-1")
p.test
## Test average number of mRNAs in clusters - p-values
avgClustSize_pvals <- lapply(c("chs-1", "clu-1", "cpg-2", "nos-2"),
function(x) {t.testdiffs_fraction(quantTable, x)})
names(avgClustSize_pvals) <- c("chs-1", "clu-1", "cpg-2", "nos-2")
print("Average number of mRNAs in clusters" )
print(avgClustSize_pvals)
fraction_pvals[[1]]
## Test average number of mRNAs in clusters - p-values
avgClustSize_pvals <- lapply(c("chs-1", "clu-1", "cpg-2", "nos-2"),
function(x) {t.testdiffs_avg(quantTable, x)})
names(avgClustSize_pvals) <- c("chs-1", "clu-1", "cpg-2", "nos-2")
print("Average number of mRNAs in clusters" )
print(avgClustSize_pvals)
avgClustSize_pvals[[1]]
p <- 2.096587e-04
(0.05 < p )
(0.005 < p )
(0.0005 < p )
(0.00005 < p )
p <- 1.279651e-09
(0.05 < p )
(0.005 < p )
(0.0005 < p )
(0.00005 < p )
(0.000005 < p )
p <- 1.379366e-02
(0.05 < p )
(0.005 < p )
(0.0005 < p )
avgClustSize_pvals[[1]]
p <- 1.519214e-03
(0.05 < p )
(0.005 < p )
(0.0005 < p )
(0.00005 < p )
p <- 1.357539e-01
(0.05 < p )
(0.005 < p )
(0.0005 < p )
avgClustSize_pvals[[2]]
p <- 0.001465718
(0.05 < p )
(0.005 < p )
(0.0005 < p )
p <- 0.012651406
(0.05 < p )
(0.005 < p )
avgClustSize_pvals[[3]]
p <- 3.517825e-02
(0.05 < p )
(0.005 < p )
(0.0005 < p )
p <- 2.098798e-07
(0.05 < p )
(0.005 < p )
(0.0005 < p )
(0.00005 < p )
(0.000005 < p )
avgClustSize_pvals[[3]]
p <- 2.296163e-02
(0.05 < p )
(0.005 < p )
(0.0005 < p )
p <- 8.335874e-02
(0.05 < p )
(0.005 < p )
(0.0005 < p )
p <- 5.649008e-02
(0.05 < p )
(0.005 < p )
(0.0005 < p )
avgClustSize_pvals[[4]]
p <- 5.649008e-02
p <- 0.0110594780
(0.05 < p )
(0.005 < p )
p <- 0.0008758297
(0.05 < p )
(0.005 < p )
(0.0005 < p )
(0.00005 < p )
p <- 0.0016355690
(0.05 < p )
(0.005 < p )
(0.0005 < p )
