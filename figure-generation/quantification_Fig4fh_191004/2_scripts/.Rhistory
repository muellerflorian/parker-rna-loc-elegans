colnames(quantTable)
unique(quantTable$Cell_Stage)
write.table(quantTable, filename = "../1_input/figure4_Sourcedata3_191022.txt", sep = "\t", quote = FALSE)
write.table(quantTable, file = "../1_input/figure4_Sourcedata3_191022.txt", sep = "\t", quote = FALSE)
print("script initiated on", quote = FALSE)
Sys.time()
library(dplyr)
library(ggplot2)
library(ggthemes)
library(gridExtra)
help(read.table)
# import the data
quantTable <- read.table(file = "../1_input/figure4_Sourcedata3_191022.txt", header = TRUE, row.names = 1)
dim(quantTable)
head(quantTable)
str(quantTable)
colnames(quantTable)
# Make a function to summarize the data
data_summary <- function(data, varname, groupnames){
require(plyr)
summary_func <- function(x, col){
c(mean = mean(x[[col]], na.rm=TRUE),
sd = sd(x[[col]], na.rm=TRUE))
}
data_sum<-ddply(data, groupnames, .fun=summary_func,
varname)
data_sum <- rename(data_sum, c("mean" = varname))
return(data_sum)
}
#summarize the total number of RNAs
UTR_summ_total_RNA <- data_summary(quantTable, varname="Total_No_RNA",
groupnames=c("Transcript", "X3UTR", "Cell_Stage"))
# plot number of RNA molecules by transcript type
ggplot(UTR_summ_total_RNA, aes(x=Cell_Stage, y=Total_No_RNA, group=Transcript, color=Transcript))+
geom_ribbon(aes(ymin=Total_No_RNA-sd, ymax=Total_No_RNA+sd, fill = Transcript), alpha=0.1, linetype = 0) +
facet_grid(. ~ X3UTR , scales = "free_y") +
geom_line() + geom_point() +
theme_linedraw() +
theme(strip.text = element_text(face = "italic"))
UTR_summ_total_clusters <- data_summary(quantTable, varname="No_RNA_clusters",
groupnames=c("Transcript", "X3UTR", "Cell_Stage"))
ggplot(UTR_summ_total_clusters, aes(x=Cell_Stage, y=No_RNA_clusters, group=Transcript, color=Transcript))+
geom_ribbon(aes(ymin=No_RNA_clusters-sd, ymax=No_RNA_clusters+sd, fill = Transcript), alpha=0.1, linetype = 0) +
facet_grid(. ~ X3UTR , scales = "free_y") +
geom_line() + geom_point() +
theme_linedraw() +
theme(strip.text = element_text(face = "italic"))
UTR_summ_fraction <- data_summary(quantTable, varname="fraction_RNA_in_clusters",
groupnames=c("Transcript", "X3UTR", "Cell_Stage"))
ggplot(UTR_summ_fraction, aes(x=Cell_Stage, y=fraction_RNA_in_clusters, group=Transcript, color=Transcript))+
geom_ribbon(aes(ymin=fraction_RNA_in_clusters-sd, ymax=fraction_RNA_in_clusters+sd, fill = Transcript), alpha=0.1, linetype = 0) +
facet_grid(. ~ X3UTR , scales = "free_y") +
geom_line() + geom_point() +
theme_linedraw() +
theme(strip.text = element_text(face = "italic"))
# summarize RNA content of clusters by transcript type
ggplot(UTR_summ_total_content, aes(x=Cell_Stage, y=Average_No_RNA_per_Cluster, group=Transcript, color=Transcript))+
geom_ribbon(aes(ymin=Average_No_RNA_per_Cluster-sd, ymax=Average_No_RNA_per_Cluster+sd, fill = Transcript), alpha=0.1, linetype = 0) +
facet_grid(. ~ X3UTR , scales = "free_y") +
geom_line() + geom_point() +
theme_linedraw() +
theme(strip.text = element_text(face = "italic"))
# summarize RNA content of clusters by transcript type
UTR_summ_total_content <- data_summary(quantTable, varname="Average_No_RNA_per_Cluster",
groupnames=c("Transcript", "X3UTR", "Cell_Stage"))
# summarize RNA content of clusters by transcript type
ggplot(UTR_summ_total_content, aes(x=Cell_Stage, y=Average_No_RNA_per_Cluster, group=Transcript, color=Transcript))+
geom_ribbon(aes(ymin=Average_No_RNA_per_Cluster-sd, ymax=Average_No_RNA_per_Cluster+sd, fill = Transcript), alpha=0.1, linetype = 0) +
facet_grid(. ~ X3UTR , scales = "free_y") +
geom_line() + geom_point() +
theme_linedraw() +
theme(strip.text = element_text(face = "italic"))
#Filter for cpg-2 and nos-2 that will be in the main figure
cpgnos2_summTotalSubset <- UTR_summ_total_content[which(UTR_summ_total_content$X3UTR == "cpg-2" | UTR_summ_total_content$X3UTR ==  "nos-2"),]
p_cpg2_nos2_AveMolPlot <- ggplot(cpgnos2_summTotalSubset, aes(x=Cell_Stage, y=Average_No_RNA_per_Cluster, group=Transcript, color=Transcript, shape = Transcript))+
geom_ribbon(aes(ymin=Average_No_RNA_per_Cluster-sd, ymax=Average_No_RNA_per_Cluster+sd, fill = Transcript), alpha=0.1, linetype = 0) +
facet_grid(. ~ X3UTR , scales = "free_y") +
ylab("mRNA molecules per cluster") +
geom_line() + geom_point() +
theme_linedraw() +
scale_fill_manual(values=c("magenta4", "green3", "magenta4")) +
scale_color_manual(values=c("magenta4", "green3", "magenta4")) +
scale_shape_manual(values=c(15, 17, 18, 6)) +
theme(strip.text = element_text(face = "italic"), panel.grid.minor = element_blank(), panel.grid.major = element_line(colour = "grey"), axis.text.y = element_text(angle=90), axis.text.x = element_text(angle=90))
p_cpg2_nos2_AveMolPlot
cpgnos2_summTotalSubset
quantTable
quantTable%>%
filter(X3UTR == "chs-1")
help(t.test)
quantTable%>%
filter(X3UTR == "chs-1")
quantTable%>%
filter(X3UTR == "chs-1") %>%
group_by(Cell_Stage)
quantTable%>%
filter(X3UTR == "chs-1") %>%
group_by(Cell_Stage) %>%
do(tidy(t.test(Average_No_RNA_per_Cluster ~ Transcript, data=.)))
library(tidyr)
library(tidyr)
quantTable%>%
filter(X3UTR == "chs-1") %>%
group_by(Cell_Stage) %>%
do(tidy(t.test(Average_No_RNA_per_Cluster ~ Transcript, data=.)))
library(tidyr)
library(broom)
quantTable%>%
filter(X3UTR == "chs-1") %>%
group_by(Cell_Stage) %>%
do(tidy(t.test(Average_No_RNA_per_Cluster ~ Transcript, data=.)))
quantTable%>%
filter(X3UTR == "chs-1") %>%
group_by(Cell_Stage)
chs1QuantTable
chs1QuantTable <- quantTable%>%
filter(X3UTR == "chs-1") %>%
group_by(Cell_Stage)
chs1QuantTable
chs1QuantTable$Transcript
chs1QuantTable$Transcript <- as.factor(chs1QuantTable$Transcript, levels = c("chs-1", "mNG")
chs1QuantTable$Transcript <- as.factor(chs1QuantTable$Transcript, levels = c("chs-1", "mNG")
chs1QuantTable$Transcript <- as.factor(chs1QuantTable$Transcript, levels = c("chs-1", "mNG"))
chs1QuantTable$Transcript <- as.factor(chs1QuantTable$Transcript, levels = c("chs-1", "mNG"))
chs1QuantTable <- quantTable%>%
filter(X3UTR == "chs-1") %>%
group_by(Cell_Stage)
factor(chs1QuantTable$Transcript, levels = c("chs-1", "mNG"))
chs1QuantTable$Transcript <- factor(chs1QuantTable$Transcript, levels = c("chs-1", "mNG"))
do(tidy(t.test(Average_No_RNA_per_Cluster ~ Transcript, data=chs1QuantTable)))
chs1QuantTable <- quantTable%>%
filter(X3UTR == "chs-1")
chs1QuantTable$Transcript <- factor(chs1QuantTable$Transcript, levels = c("chs-1", "mNG"))
chs1QuantTable%>%
group_by(Cell_Stage)
chs1QuantTable%>%
group_by(Cell_Stage) %>%
do(tidy(t.test(Average_No_RNA_per_Cluster ~ Transcript, data=.)))
chs1QuantTable
chs1QuantTable$Transcript
chs1QuantTable%>%
dplyr::group_by(Cell_Stage) %>%
do(tidy(t.test(Average_No_RNA_per_Cluster ~ Transcript, data=.)))
chs1QuantTable%>%
dplyr::group_by(Cell_Stage) %>%
dplyr::summarize(value = list(value))
chs1QuantTable%>%
dplyr::group_by(Cell_Stage) %>%
dplyr::summarize(value = list(Average_No_RNA_per_Cluster))
chs1QuantTable%>%
dplyr::group_by(Cell_Stage) %>%
dplyr::summarize(value = list(Average_No_RNA_per_Cluster), Transcript)
chs1QuantTable%>%
dplyr::group_by(Cell_Stage, Transcript) %>%
dplyr::summarize(value = list(Average_No_RNA_per_Cluster))
chs1QuantTable%>%
dplyr::group_by(Cell_Stage, Transcript) %>%
dplyr::summarize(value = list(Average_No_RNA_per_Cluster)) %>%
spread(Transcript, value)
chs1SummaryTable <- chs1QuantTable%>%
dplyr::group_by(Cell_Stage, Transcript) %>%
dplyr::summarize(value = list(Average_No_RNA_per_Cluster)) %>%
spread(Transcript, value)
chs1SummaryTable[[1,2]]
t.test(chs1SummaryTable[[1,2]], chs1SummaryTable[[1,3]])
chs1SummaryTable[[1,3]]
chs1SummaryTable[[1,1]]
chs1SummaryTable
chs1SummaryTable$chs-1
[[chs1SummaryTable$chs-1]]
unlist(chs1SummaryTable$chs-1)
chs1QuantTable$Transcript <- factor(chs1QuantTable$Transcript, levels = c("chs-1", "mNG"))
chs1SummaryTable <- chs1QuantTable%>%
dplyr::group_by(Cell_Stage, Transcript) %>%
dplyr::summarize(value = list(Average_No_RNA_per_Cluster)) %>%
spread(Transcript, value)
chs1SummaryTable[[1,2]]
chs1SummaryTable[[1,3]]
chs1SummaryTable[[2,3]]
chs1QuantTable
chs1SummaryTable
chs1SummaryTable[[3,3]]
chs1SummaryTable[[3,2]]
chs1SummaryTable[[3,3]]
help(t.test)
t.test(chs1SummaryTable[[3,2]], chs1SummaryTable[[3,3]])
t.test(chs1SummaryTable[[4,2]], chs1SummaryTable[[4,3]])
chs1SummaryTable[[4,2]]
chs1SummaryTable[[4,3]]
chs1SummaryTable[[1,2]]
chs1SummaryTable[[1,3]]
chs1QuantTable$Transcript
chs1QuantTable
nos2QuantTable <- quantTable%>%
filter(X3UTR == "nos-2")
nos2QuantTable <- quantTable%>%
filter(X3UTR == "nos-2")
nos2QuantTable$Transcript
nos2QuantTable$Transcript <- factor(nos2QuantTable$Transcript, levels = c("nos-2", "mNG"))
nos2QuantTable
nos2QuantTable <- quantTable%>%
filter(X3UTR == "nos-2")
nos2QuantTable$Transcript
nos2QuantTable$Transcript <- factor(nos2QuantTable$Transcript, levels = c("nos-2", "mNG"))
nos2QuantTable
nos2QuantTable <- quantTable%>%
filter(X3UTR == "nos-2")
nos2QuantTable
quantTable
nos2QuantTable
nos2SummaryTable <- nos2QuantTable%>%
dplyr::group_by(Cell_Stage, Transcript) %>%
dplyr::summarize(value = list(Average_No_RNA_per_Cluster)) %>%
spread(Transcript, value)
t.test(nos2SummaryTable$nos-2, nos2SummaryTable$mNG)
nos2SummaryTable$nos-2
nos2SummaryTable[[1,2]]
nos2SummaryTable[[1,2]]
nos2SummaryTable[[1,3]]
t.test(nos2SummaryTable[[1,2]], nos2Summary[[1,3]])
t.test(nos2SummaryTable[[1,2]], nos2SummaryTable[[1,3]])
t.test(nos2SummaryTable[[1,2]], nos2SummaryTable[[1,3]])
t.test(nos2SummaryTable[[2,2]], nos2SummaryTable[[2,3]])
t.test(nos2SummaryTable[[3,2]], nos2SummaryTable[[3,3]])
t.test(nos2SummaryTable[[4,2]], nos2SummaryTable[[4,3]])
lapply(t.test(nos2SummaryTable[[,2]], nos2SummaryTable[[,3]]))
help(lapply)
function(data){
t.test(data[[,2]], data[[,3]])
}
loop_t.test <- function(data){
t.test(data[[,2]], data[[,3]])
}
loop_t.test(nos2SummaryTable)
lapply(nos2SummaryTable, 2, t.test(nos2SummaryTable[[,2]], nos2SummaryTable[[,3]]))
lapply(nos2SummaryTable, t.test(nos2SummaryTable[[,2]], nos2SummaryTable[[,3]]))
nos2SummaryTable
nos2SummaryTable$Cell_Stage <- factor(nos2SummaryTable$Cell_Stage, levels = "4-cell", "8-cell", "10-16-cell", "18-28-cell")
nos2SummaryTable$Cell_Stage
nos2SummaryTable$Cell_Stage <- factor(nos2SummaryTable$Cell_Stage, levels = c("4-cell", "8-cell", "10-16-cell", "18-28-cell"))
nos2SummaryTable$Cell_Stage
nos2SummaryTable
help(factor)
nos2SummaryTable$Cell_Stage <- factor(nos2SummaryTable$Cell_Stage, levels = c("4-cell", "8-cell", "10-16-cell", "18-28-cell"), ordered = is.ordered(x))
nos2SummaryTable$Cell_Stage <- factor(nos2SummaryTable$Cell_Stage, levels = c("4-cell", "8-cell", "10-16-cell", "18-28-cell"), ordered = TRUE)
nos2SummaryTable
str(quantTable)
quantTable$Cell_Stage <- factor(quantTable$Cell_Stage, levels = c("4-cell", "8-cell", "10-16-cell", "18-28-cell"))
quantTable$Cell_Stage <- factor(quantTable$Cell_Stage, levels = c("4-cell", "8-cell", "10-16-cell", "18-28-cell"))
dim(quantTable)
head(quantTable)
str(quantTable)
# Make a function to summarize the data
data_summary <- function(data, varname, groupnames){
require(plyr)
summary_func <- function(x, col){
c(mean = mean(x[[col]], na.rm=TRUE),
sd = sd(x[[col]], na.rm=TRUE))
}
data_sum<-ddply(data, groupnames, .fun=summary_func,
varname)
data_sum <- rename(data_sum, c("mean" = varname))
return(data_sum)
}
#summarize the total number of RNAs
UTR_summ_total_RNA <- data_summary(quantTable, varname="Total_No_RNA",
groupnames=c("Transcript", "X3UTR", "Cell_Stage"))
# plot number of RNA molecules by transcript type
ggplot(UTR_summ_total_RNA, aes(x=Cell_Stage, y=Total_No_RNA, group=Transcript, color=Transcript))+
geom_ribbon(aes(ymin=Total_No_RNA-sd, ymax=Total_No_RNA+sd, fill = Transcript), alpha=0.1, linetype = 0) +
facet_grid(. ~ X3UTR , scales = "free_y") +
geom_line() + geom_point() +
theme_linedraw() +
theme(strip.text = element_text(face = "italic"))
UTR_summ_total_clusters <- data_summary(quantTable, varname="No_RNA_clusters",
groupnames=c("Transcript", "X3UTR", "Cell_Stage"))
ggplot(UTR_summ_total_clusters, aes(x=Cell_Stage, y=No_RNA_clusters, group=Transcript, color=Transcript))+
geom_ribbon(aes(ymin=No_RNA_clusters-sd, ymax=No_RNA_clusters+sd, fill = Transcript), alpha=0.1, linetype = 0) +
facet_grid(. ~ X3UTR , scales = "free_y") +
geom_line() + geom_point() +
theme_linedraw() +
theme(strip.text = element_text(face = "italic"))
UTR_summ_fraction <- data_summary(quantTable, varname="fraction_RNA_in_clusters",
groupnames=c("Transcript", "X3UTR", "Cell_Stage"))
ggplot(UTR_summ_fraction, aes(x=Cell_Stage, y=fraction_RNA_in_clusters, group=Transcript, color=Transcript))+
geom_ribbon(aes(ymin=fraction_RNA_in_clusters-sd, ymax=fraction_RNA_in_clusters+sd, fill = Transcript), alpha=0.1, linetype = 0) +
facet_grid(. ~ X3UTR , scales = "free_y") +
geom_line() + geom_point() +
theme_linedraw() +
theme(strip.text = element_text(face = "italic"))
# summarize RNA content of clusters by transcript type
UTR_summ_total_content <- data_summary(quantTable, varname="Average_No_RNA_per_Cluster",
groupnames=c("Transcript", "X3UTR", "Cell_Stage"))
# summarize RNA content of clusters by transcript type
ggplot(UTR_summ_total_content, aes(x=Cell_Stage, y=Average_No_RNA_per_Cluster, group=Transcript, color=Transcript))+
geom_ribbon(aes(ymin=Average_No_RNA_per_Cluster-sd, ymax=Average_No_RNA_per_Cluster+sd, fill = Transcript), alpha=0.1, linetype = 0) +
facet_grid(. ~ X3UTR , scales = "free_y") +
geom_line() + geom_point() +
theme_linedraw() +
theme(strip.text = element_text(face = "italic"))
#Filter for cpg-2 and nos-2 that will be in the main figure
cpgnos2_summTotalSubset <- UTR_summ_total_content[which(UTR_summ_total_content$X3UTR == "cpg-2" | UTR_summ_total_content$X3UTR ==  "nos-2"),]
p_cpg2_nos2_AveMolPlot <- ggplot(cpgnos2_summTotalSubset, aes(x=Cell_Stage, y=Average_No_RNA_per_Cluster, group=Transcript, color=Transcript, shape = Transcript))+
geom_ribbon(aes(ymin=Average_No_RNA_per_Cluster-sd, ymax=Average_No_RNA_per_Cluster+sd, fill = Transcript), alpha=0.1, linetype = 0) +
facet_grid(. ~ X3UTR , scales = "free_y") +
ylab("mRNA molecules per cluster") +
geom_line() + geom_point() +
theme_linedraw() +
scale_fill_manual(values=c("magenta4", "green3", "magenta4")) +
scale_color_manual(values=c("magenta4", "green3", "magenta4")) +
scale_shape_manual(values=c(15, 17, 18, 6)) +
theme(strip.text = element_text(face = "italic"), panel.grid.minor = element_blank(), panel.grid.major = element_line(colour = "grey"), axis.text.y = element_text(angle=90), axis.text.x = element_text(angle=90))
p_cpg2_nos2_AveMolPlot
#Set date
date <- format(Sys.time(), "%y%m%d")
#set filename
filename <- paste("../3_output/", date, "_output_plots_Fig4FH.pdf", sep = "")
p_cpg2_nos2_AveMolPlot
#Set date
date <- format(Sys.time(), "%y%m%d")
#set filename
filename <- paste("../3_output/", date, "_output_plots_Fig4FH.pdf", sep = "")
#export pdf
pdf(file = filename, width = 4, height = 2.5)
grid.arrange(p_cpg2_nos2_AveMolPlot)
grid.arrange(p_cpg2_nos2_AveMolPlot)
dev.off()
dev.off()
print(filename, quote = FALSE)
nos2QuantTable <- quantTable%>%
filter(X3UTR == "nos-2")
nos2QuantTable$Transcript
quantTable
nos2QuantTable$Transcript <- factor(nos2QuantTable$Transcript, levels = c("nos-2", "mNG"))
nos2SummaryTable <- nos2QuantTable%>%
dplyr::group_by(Cell_Stage, Transcript) %>%
dplyr::summarize(value = list(Average_No_RNA_per_Cluster)) %>%
spread(Transcript, value)
nos2SummaryTable
nos2SummaryTable
nos2SummaryTable[[1,2]]
nos2SummaryTable[[1,3]]
t.test(nos2SummaryTable[[1,2]], nos2SummaryTable[[1,3]])
t.test(nos2SummaryTable[[2,2]], nos2SummaryTable[[2,3]])
t.test(nos2SummaryTable[[3,2]], nos2SummaryTable[[3,3]])
t.test(nos2SummaryTable[[4,2]], nos2SummaryTable[[4,3]])
help(pairwise.t.test)
nos2QuantTable
pairwise.t.test(nos2QuantTable, Transcript)
pairwise.t.test(nos2QuantTable, nos2QuantTable$Transcript)
lapply(nos2SummaryTable, function(x) {t.test(x[[,2]], x[[,3]])})
lapply(nos2SummaryTable, 1, function(x) {t.test(x[[,2]], x[[,3]])})
sapply(nos2SummaryTable, 1, function(x) {t.test(x[[,2]], x[[,3]])})
sapply(nos2SummaryTable, 2, function(x) {t.test(x[[,2]], x[[,3]])})
help(lapply)
sapply(nos2SummaryTable, 2, function(x) t.test(x[[,2]], x[[,3]]))
sapply(nos2SummaryTable, function(x) t.test(x[[,2]], x[[,3]]))
apply(nos2SummaryTable, 1, function(x) t.test(x[[,2]], x[[,3]]))
apply(nos2SummaryTable, 1, function(x) t.test(x[[1,2]], x[[1,3]]))
apply(nos2SummaryTable, 1, function(x) t.test(x[,2], x[,3]))
apply(nos2SummaryTable, 1, function(x) t.test(unlist(x[,2]), unlist(x[,3])))
unlist(nos2SummaryTable[,2])
unlist(nos2SummaryTable[1,2])
apply(nos2SummaryTable, 1, function(x) t.test(nos2SummaryTable[[x,2]], nos2SummaryTable[[x,3]]))
apply(nos2SummaryTable, 1, function(x) t.test(unlist(nos2SummaryTable[[x,2]](), unlist(nos2SummaryTable[[x,3]])))
apply(nos2SummaryTable, 1, function(x) t.test(unlist(nos2SummaryTable[[x,2]](), unlist(nos2SummaryTable[[x,3]])))
apply(nos2SummaryTable, 1, function(x) t.test(unlist(nos2SummaryTable[[x,2]](), unlist(nos2SummaryTable[[x,3]]))))
apply(nos2SummaryTable, 1, function(x) t.test(unlist(nos2SummaryTable[[x,2]], unlist(nos2SummaryTable[[x,3]])))
apply(nos2SummaryTable, 1, function(x) t.test(unlist(nos2SummaryTable[[x,2]], unlist(nos2SummaryTable[[x,3]])))
apply(nos2SummaryTable, 1, function(x) t.test(unlist(nos2SummaryTable[[x,2]]), unlist(nos2SummaryTable[[x,3]])))
for (i in 1:4){
echo(i)
t.test(nos2SummaryTable[[i,2]], nos2SummaryTable[[i,3]])
}
print(i)
help(t.test)
mymat <- matrix(nrow=4, ncol=2)
for (i in 1:4){
print(i)
mymat[i,1] <- t.test(nos2SummaryTable[[i,2]], nos2SummaryTable[[i,3]])$p.value
mymat[i,2] <- t.test(nos2SummaryTable[[i,2]], nos2SummaryTable[[i,3]])$statistic
}
mymat
colnames(mymat) <- c("p.value", "test.statistic")
for (i in 1:4){
print(i)
mymat[i,1] <- t.test(nos2SummaryTable[[i,2]], nos2SummaryTable[[i,3]])$p.value
mymat[i,2] <- t.test(nos2SummaryTable[[i,2]], nos2SummaryTable[[i,3]])$statistic
}
mymat
nos2SummaryTable
mymat <- matrix(nrow=4, ncol=2)
colnames(mymat) <- c("p.value", "test.statistic")
for (i in 1:4){
print(i)
rownames(mymat)[i] <- nos2SummaryTable$Cell_Stage[i]
mymat[i,1] <- t.test(nos2SummaryTable[[i,2]], nos2SummaryTable[[i,3]])$p.value
mymat[i,2] <- t.test(nos2SummaryTable[[i,2]], nos2SummaryTable[[i,3]])$statistic
}
nos2SummaryTable$Cell_Stage
nos2SummaryTable$Cell_Stage[1]
as.character(nos2SummaryTable$Cell_Stage[1])
mymat <- matrix(nrow=4, ncol=2)
colnames(mymat) <- c("p.value", "test.statistic")
for (i in 1:4){
print(i)
rownames(mymat)[i] <- as.character(nos2SummaryTable$Cell_Stage[i])
mymat[i,1] <- t.test(nos2SummaryTable[[i,2]], nos2SummaryTable[[i,3]])$p.value
mymat[i,2] <- t.test(nos2SummaryTable[[i,2]], nos2SummaryTable[[i,3]])$statistic
}
rownames(mymat)
rownames(mymat)
rowNames(mymat)
colnames(mymat)
rownames(mymat)
mymat <- matrix(nrow=4, ncol=2)
mymat <- df(nrow=4, ncol=2)
mymat <- dataframe(nrow=4, ncol=2)
mymat <- data.frame(nrow=4, ncol=2)
rownames(mymat)
mymat
for (i in 1:4){
mymat[i,1] <- t.test(nos2SummaryTable[[i,2]], nos2SummaryTable[[i,3]])$p.value
mymat[i,2] <- t.test(nos2SummaryTable[[i,2]], nos2SummaryTable[[i,3]])$statistic
rownames(mymat)[i] <- as.character(nos2SummaryTable$Cell_Stage[i])
}
mymat
colnames(mymat) <- c("p.value", "test.statistic")
mymat
help(p.adjust)
p.adjust(mymat$p.value, method = "hochberg")
p.adjust(mymat$p.value, method = "holm")
p.adjust(mymat$p.value, method = "hommel")
p.adjust(mymat$p.value, method = "bonferroni")
p.adjust(mymat$p.value, method = "BH")
p.adjust(mymat$p.value, method = "BY")
p.adjust(mymat$p.value, method = "fdr")
p.adjust(mymat$p.value, method = "none")
p.adjust(mymat$p.value, method = "BH")
cbind(mymat, padjust = p.adjust(mymat$p.value, method = "BH"))
mymat <- data.frame(nrow=4, ncol=1)
colnames(mymat) <- c("p.value")
for (i in 1:4){
mymat[i,1] <- t.test(nos2SummaryTable[[i,2]], nos2SummaryTable[[i,3]])$p.value
rownames(mymat)[i] <- as.character(nos2SummaryTable$Cell_Stage[i])
}
mymat %>%
mutate(padj )
cbind(mymat, padjust = p.adjust(mymat$p.value, method = "BH"))
nos2_pvalues <- data.frame(nrow=4, ncol=1)
colnames(mymat) <- c("p.value")
for (i in 1:4){
mymat[i,1] <- t.test(nos2SummaryTable[[i,2]], nos2SummaryTable[[i,3]])$p.value
rownames(mymat)[i] <- as.character(nos2SummaryTable$Cell_Stage[i])
}
nos2_pvalues <- cbind(nos2_pvalues, padjust = p.adjust(nos2_pvalues$p.value, method = "BH"))
nos2_pvalues
nos2_pvalues <- data.frame(nrow=4, ncol=1)
colnames(mymat) <- c("p.value")
nos2_pvalues <- data.frame(nrow=4, ncol=1)
colnames(nos2_pvalues) <- c("p.value")
for (i in 1:4){
nos2_pvalues[i,1] <- t.test(nos2SummaryTable[[i,2]], nos2SummaryTable[[i,3]])$p.value
rownames(nos2_pvalues)[i] <- as.character(nos2SummaryTable$Cell_Stage[i])
}
nos2_pvalues <- cbind(nos2_pvalues, padjust = p.adjust(nos2_pvalues$p.value, method = "BH"))
nos2_pvalues
nos2_pvalues <- data.frame(nrow=4, ncol=1)
colnames(nos2_pvalues) <- c("p.value")
nos2_pvalues
nos2_pvalues <- data.frame()
colnames(nos2_pvalues) <- c("p.value")
for (i in 1:4){
nos2_pvalues[i,1] <- t.test(nos2SummaryTable[[i,2]], nos2SummaryTable[[i,3]])$p.value
rownames(nos2_pvalues)[i] <- as.character(nos2SummaryTable$Cell_Stage[i])
}
colnames(nos2_pvalues) <- c("p.value")
nos2_pvalues
nos2_pvalues <- cbind(nos2_pvalues, padjust = p.adjust(nos2_pvalues$p.value, method = "BH"))
nos2_pvalues
nos2_pvalues <- cbind(nos2_pvalues, BH_padjust = p.adjust(nos2_pvalues$p.value, method = "BH"))
nos2_pvalues
nos2_pvalues <- data.frame()
for (i in 1:4){
nos2_pvalues[i,1] <- t.test(nos2SummaryTable[[i,2]], nos2SummaryTable[[i,3]])$p.value
rownames(nos2_pvalues)[i] <- as.character(nos2SummaryTable$Cell_Stage[i])
}
colnames(nos2_pvalues) <- c("p.value")
nos2_pvalues <- cbind(nos2_pvalues, BH_padjust = p.adjust(nos2_pvalues$p.value, method = "BH"))
nos2_pvalues
cpg2QuantTable <- quantTable%>%
filter(X3UTR == "cpg-2")
cpg2QuantTable$Transcript <- factor(cpg2QuantTable$Transcript, levels = c("cpg-2", "mNG"))
cpg2QuantTable <- quantTable%>%
filter(X3UTR == "cpg-2")
cpg2QuantTable$Transcript <- factor(cpg2QuantTable$Transcript, levels = c("cpg-2", "mNG"))
cpg2SummaryTable <- cpg2QuantTable%>%
dplyr::group_by(Cell_Stage, Transcript) %>%
dplyr::summarize(value = list(Average_No_RNA_per_Cluster)) %>%
spread(Transcript, value)
# Perform t-tests
cpg2_pvalues <- data.frame()
for (i in 1:4){
cpg2_pvalues[i,1] <- t.test(cpg2SummaryTable[[i,2]], cpg2SummaryTable[[i,3]])$p.value
rownames(cpg2_pvalues)[i] <- as.character(cpg2SummaryTable$Cell_Stage[i])
}
colnames(cpg2_pvalues) <- c("p.value")
cpg2_pvalues
# Multiple test correct
cpg2_pvalues <- cbind(cpg2_pvalues, BH_padjust = p.adjust(cpg2_pvalues$p.value, method = "BH"))
# Table of nos-2 v. ng p-values
cpg2_pvalues
